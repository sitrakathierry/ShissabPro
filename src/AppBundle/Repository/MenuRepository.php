<?php

namespace AppBundle\Repository;
use AppBundle\Entity\Menu;
use AppBundle\Entity\User;

/**
 * MenuRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MenuRepository extends \Doctrine\ORM\EntityRepository
{

	public function roleHasMenu(Menu $menu,$role,User $user = null)
	{
		if ($role == 'ROLE_SUPER_ADMIN') {
			return true;
		} else if ($role == 'ROLE_AGENT'){
			$em = $this->getEntityManager();

			$query = "	select mu.id
						from menu_utilisateur mu
						where mu.user = '" . $user->getId() . "'";

			$query .= "	and mu.menu = " .$menu->getId();

			$statement = $em->getConnection()->prepare($query);
	        $statement->execute();

	        $result = $statement->fetchAll();

	        if (!empty($result)) {
	        	return true;
	        }
	        return false;
		}else{
			$em = $this->getEntityManager();

			$query = "	select ar.id
						from access_role ar
						where ar.role = '" . $role . "'";

			$query .= "	and ar.menu_id = " .$menu->getId();

			$statement = $em->getConnection()->prepare($query);
	        $statement->execute();

	        $result = $statement->fetchAll();

	        if (!empty($result)) {
	        	return true;
	        }
	        return false;
		}

	}

	public function byRole($role, User $user = null)
	{

		/*if ($role == 'ROLE_SUPER_ADMIN') {

            $parents = $this->getEntityManager()
		        			->getRepository('AppBundle:Menu')
		        			->createQueryBuilder('m')
				            ->where('m.menu IS NULL')
				            ->orderBy('m.rang', 'ASC')
				            ->getQuery()
		            		->getResult();
		} else */if ($role == 'ROLE_AGENT'){
			$parents = $this->getEntityManager()
				            ->getRepository('AppBundle:MenuUtilisateur')
				            ->createQueryBuilder('menu_utilisateur')
				            ->select('menu_utilisateur')
				            ->innerJoin('menu_utilisateur.menu', 'menu')
				            ->addSelect('menu')
				            ->innerJoin('menu_utilisateur.user', 'user')
				            ->addSelect('user')
				            ->where('user = :user')
				            ->andWhere('menu.menu IS NULL')
				            ->setParameters(array(
				                'user' => $user,
				            ))
				            ->orderBy('menu.rang', 'ASC')
				            ->getQuery()
				            ->getResult();
		} else {			
			$parents = $this->getEntityManager()
				            ->getRepository('AppBundle:AccessRole')
				            ->createQueryBuilder('access_role')
				            ->select('access_role')
				            ->innerJoin('access_role.menu', 'menu')
				            ->addSelect('menu')
				            ->where('access_role.role = :role')
				            ->andWhere('menu.menu IS NULL')
				            ->setParameters(array(
				                'role' => $role,
				            ))
				            ->orderBy('menu.rang', 'ASC')
				            ->getQuery()
				            ->getResult();
		}


        $liste_menus = [];

        foreach ($parents as $parent) {

         		/*if ($role == 'ROLE_SUPER_ADMIN') {
         			$level1 = $parent;
         		} else{*/
                	$level1 = $parent->getMenu();
         		/*}*/

                $liste_menus[] = $level1;

                 $childs = $this->getEntityManager()
			                    ->getRepository('AppBundle:Menu')
			                    ->getMenuChild($level1,$role,$user);

                if (count($childs) > 0) {
                    $level1->setChild($childs);
                    foreach ($childs as &$child) {
                    	$childs_2 = $this->getEntityManager()
                            ->getRepository('AppBundle:Menu')
                            ->getMenuChild($child,$role,$user);

                        if (count($childs_2) > 0) {
                            $child->setChild($childs_2);
                            foreach ($childs_2 as &$child_2) {
                            	$childs_3 = $this->getEntityManager()
                                    ->getRepository('AppBundle:Menu')
                                    ->getMenuChild($child_2,$role,$user);

                                if (count($childs_3) > 0) {
                                    $child_2->setChild($childs_3);
                                    foreach ($childs_3 as &$child_3) {
                                    	$childs_4 = $this->getEntityManager()
                                            ->getRepository('AppBundle:Menu')
                                            ->getMenuChild($child_3,$role,$user);
                                        if (count($childs_4) > 0) {
                                            $child_3->setChild($childs_3);
                                        }
                                	}
                                }
                        	}
                        }
                	}
			    }

         }

         return $liste_menus;

	}

	public function getMenuChild(Menu $parent, $role, User $user = null)
    {
    	$result = [];

        /*if ($role == 'ROLE_SUPER_ADMIN') {

        	$result = $this->getEntityManager()
		        			->getRepository('AppBundle:Menu')
		        			->createQueryBuilder('m')
				            ->where('m.menu = :parent')
				            ->orderBy('m.rang', 'ASC')
			            	->setParameter('parent', $parent)
				            ->getQuery()
		            		->getResult();

    	} else */if ($role == 'ROLE_AGENT'){
    		$childs = $this->getEntityManager()
	            ->getRepository('AppBundle:MenuUtilisateur')
	            ->createQueryBuilder('menu_utilisateur')
	            ->select('menu_utilisateur')
	            ->innerJoin('menu_utilisateur.menu', 'menu')
	            ->addSelect('menu')
	            ->where('menu_utilisateur.user = :user')
	            ->andWhere('menu.menu = :parent')
	            ->setParameters(array(
	                'user' => $user,
	                'parent' => $parent
	            ))
	            ->orderBy('menu.rang', 'ASC')
	            ->getQuery()
	            ->getResult();

	        foreach ($childs as &$child) {
	        	array_push($result, $child->getMenu());
	        }
    	}else{
    		$childs = $this->getEntityManager()
	            ->getRepository('AppBundle:AccessRole')
	            ->createQueryBuilder('access_role')
	            ->select('access_role')
	            ->innerJoin('access_role.menu', 'menu')
	            ->addSelect('menu')
	            ->where('access_role.role = :role')
	            ->andWhere('menu.menu = :parent')
	            ->setParameters(array(
	                'role' => $role,
	                'parent' => $parent
	            ))
	            ->orderBy('menu.rang', 'ASC')
	            ->getQuery()
	            ->getResult();

	        foreach ($childs as &$child) {
	        	array_push($result, $child->getMenu());
	        }
    	}

    	return $result;
    }

    public function getAllMenu()
    {
        $menus = $this->getEntityManager()
            ->getRepository('AppBundle:Menu')
            ->createQueryBuilder('m')
            ->select('m')
            ->leftJoin('m.children', 'children')
            ->addSelect('children')
            ->where('m.menu IS NULL')
            ->orderBy('m.rang', 'ASC')
            ->getQuery()
            ->getResult();
        return $menus;
    }

}
